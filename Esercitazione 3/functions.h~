#ifndef __functions_h__
#define __functions_h__

#include <iostream>
#include <fstream>
#include <string>
#include<cmath>
#include<cstdlib>
#include<vector>
#include "functions.h"

using namespace std; 

//Function for statistical uncertainty estimation:
/*Description of the punction: the function estimate the uncertainty between 

Inputs:
AV: vector containing the cumulative averages 
AV2: vector containig the cumulative averages^2
n: number of block 
*/

void random_setup(Random &rnd)//function_random_generator_setup
{

	int seed[4];
   	int p1, p2;
   	ifstream Primes("Primes");
   	if (Primes.is_open()){
      Primes >> p1 >> p2 ;
   	} else cerr << "PROBLEM: Unable to open Primes" << endl;
   	Primes.close();

   	ifstream input("seed.in");
   	string property;
   	if (input.is_open()){
      	while ( !input.eof() ){
         input >> property;
         if( property == "RANDOMSEED" ){
            input >> seed[0] >> seed[1] >> seed[2] >> seed[3];
            rnd.SetRandom(seed,p1,p2);
         }
      }
      input.close();
   } else cerr << "PROBLEM: Unable to open seed.in" << endl;
};


template <typename T> double error( vector<T> AV, vector<T> AV2, int n )
{
	if (n==0)
	{
		return 0 ; 
	}
	else{
		return sqrt((AV2[n] - pow(AV[n], 2)/n)); 
	}; 	
}; 



// =====================================================================
template <typename T> double CalcolaMedia( const vector<T> & v) {
	T accumulo = 0;
	for ( int k = 0 ; k < v.size() ; k++ ) {    accumulo += v[k] ;
	}
  
  return accumulo / v.size() ;

};

template <typename T> double CalcolaMediana( vector<T> v ) {

	sort( v.begin(), v.end() ) ;  // Use the STL sort 

	T mediana; // creo variabile che voglio ritornare
  	int n = v.size()/2  ; // posizione a met√† 
	if(v.size() %2==0)//caso pari 
  	{
  	mediana = (v[n-1] + v[n])/2 ; 
  	}else //caso dispari 
  	{
  	mediana = v[n] ; 
  	}
  
  return mediana;
};

template <typename T> double CalcolaVarianza( const vector<T> & v) {

  T sumquad = 0 ;// inizializzo la somma dei quadrati 
  for(int i = 0 ; i < v.size() ; i++)
  {
    sumquad += pow((v[i] - CalcolaMedia(v)),2); 
  }

  return sumquad/v.size() ;

};


#endif

